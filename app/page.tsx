'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { createClient } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { toast } from 'sonner';
import { Navbar } from '@/components/navbar';
import { RefreshCw, Beaker } from 'lucide-react';

export default function Home() {
  const [ingredients, setIngredients] = useState('');
  const [type, setType] = useState('');
  const [loading, setLoading] = useState(false);
  const [user, setUser] = useState<any>(null);
  const router = useRouter();
  const supabase = createClient();

  // Recettes statiques pour les tests
  const testRecipes = [
    {
      titre: "Poulet Basquaise",
      temps: "45 minutes",
      difficulte: "Moyen",
      ingredients: [
        "4 filets de poulet",
        "2 poivrons rouges",
        "2 tomates",
        "1 oignon",
        "3 gousses d'ail",
        "1 verre de vin blanc",
        "Huile d'olive",
        "Sel et poivre"
      ],
      etapes: [
        "Couper les filets de poulet en morceaux et les faire dorer dans l'huile d'olive",
        "√âmincer l'oignon et l'ail, ajouter √† la po√™le",
        "Couper les poivrons et tomates en d√©s, ajouter √† la pr√©paration",
        "Verser le vin blanc et laisser mijoter 30 minutes √† feu doux",
        "Saler, poivrer et servir avec du riz basmati"
      ]
    },
    {
      titre: "Quiche Lorraine",
      temps: "35 minutes",
      difficulte: "Facile",
      ingredients: [
        "1 p√¢te bris√©e",
        "200g de lardons fum√©s",
        "3 ≈ìufs",
        "20cl de cr√®me fra√Æche",
        "100g de gruy√®re r√¢p√©",
        "Sel, poivre, noix de muscade"
      ],
      etapes: [
        "Pr√©chauffer le four √† 180¬∞C",
        "Faire revenir les lardons dans une po√™le sans mati√®re grasse",
        "Dans un saladier, battre les ≈ìufs avec la cr√®me, sel, poivre et muscade",
        "√âtaler la p√¢te dans un moule √† tarte, piquer le fond avec une fourchette",
        "R√©partir les lardons et le gruy√®re sur la p√¢te",
        "Verser l'appareil √† quiche et enfourner pour 25 minutes"
      ]
    },
    {
      titre: "Tarte Tatin",
      temps: "1h10 minutes",
      difficulte: "Moyen",
      ingredients: [
        "6 pommes golden",
        "200g de sucre",
        "100g de beurre",
        "1 p√¢te feuillet√©e",
        "1 gousse de vanille",
        "Beurre demi-sel pour le moule"
      ],
      etapes: [
        "Pr√©chauffer le four √† 180¬∞C",
        "√âplucher et couper les pommes en quartiers",
        "Faire carameliser le sucre dans une po√™le, ajouter le beurre",
        "Ajouter les pommes et la gousse de vanille fendue, cuire 15 minutes",
        "Beurrer un moule √† manqu√©, disposer les pommes",
        "Recouvrir de p√¢te feuillet√©e, enfourner 30 minutes",
        "D√©mouler √† chaud et servir ti√®de avec de la cr√®me fra√Æche"
      ]
    }
  ];

  // V√©rifier l'authentification au chargement
  useEffect(() => {
    const checkUser = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        router.push('/auth');
      } else {
        setUser(user);
      }
    };
    
    checkUser();
  }, [router, supabase]);

  
  const generateRecipe = async () => {
    setLoading(true);

    try {
      // R√©cup√©rer le token de l'utilisateur
      const { data: { session } } = await supabase.auth.getSession();

      if (!session?.access_token) {
        toast.error('Vous devez √™tre connect√© pour g√©n√©rer des recettes');
        return;
      }

      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`
        },
        body: JSON.stringify({ ingredients, type })
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Erreur API:', errorText);

        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error?.includes('Cl√© API Gemini non configur√©e')) {
            toast.error('Cl√© API Gemini non configur√©e. Allez dans ‚öôÔ∏è Param√®tres pour la configurer.');
          } else {
            toast.error(errorData.error || 'Erreur lors de la g√©n√©ration de la recette');
          }
        } catch {
          toast.error('Erreur lors de la g√©n√©ration de la recette');
        }
        return;
      }

      const data = await response.json();
      console.log('Recette re√ßue:', data);

      if (data.recipe) {
        localStorage.setItem('recipe', JSON.stringify(data.recipe));
        router.push('/recipe');
      } else {
        toast.error('Aucune recette g√©n√©r√©e');
      }
    } catch (error) {
      console.error('Erreur:', error);
      toast.error('Une erreur est survenue');
    } finally {
      setLoading(false);
    }
  };

  const generateStaticRecipe = () => {
    setLoading(true);

    try {
      // Choisir une recette au hasard parmi les recettes de test
      const randomRecipe = testRecipes[Math.floor(Math.random() * testRecipes.length)];

      // Stocker la recette dans localStorage
      localStorage.setItem('recipe', JSON.stringify(randomRecipe));

      toast.success(`Recette statique g√©n√©r√©e : ${randomRecipe.titre}`);

      // Rediriger vers la page de recette apr√®s un court d√©lai
      setTimeout(() => {
        router.push('/recipe');
      }, 1000);
    } catch (error) {
      console.error('Erreur:', error);
      toast.error('Erreur lors de la g√©n√©ration de la recette statique');
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return <div className="min-h-screen flex items-center justify-center">Chargement...</div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-100 to-red-100">
      <Navbar />
      <div className="max-w-2xl mx-auto p-8">
        
        <Card className="p-6 shadow-lg">
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-2">
                Quels ingr√©dients as-tu ? ü•ï
              </label>
              <Input
                placeholder="Ex: poulet, tomates, riz"
                value={ingredients}
                onChange={(e) => setIngredients(e.target.value)}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-2">
                Type de plat üçΩÔ∏è
              </label>
              <Input
                placeholder="Ex: plat principal, dessert, entr√©e"
                value={type}
                onChange={(e) => setType(e.target.value)}
                className="w-full"
              />
            </div>
            
            <div className="space-y-3">
              <Button
                onClick={generateRecipe}
                disabled={loading || !ingredients || !type}
                className="w-full"
              >
                <>
              {loading && <RefreshCw className="w-4 h-4 mr-2 animate-spin" />}
              {loading ? 'G√©n√©ration en cours...' : 'G√©n√©rer une recette (IA)'}
            </>
              </Button>

              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <span className="w-full border-t" />
                </div>
                <div className="relative flex justify-center text-xs uppercase">
                  <span className="bg-white px-2 text-muted-foreground">ou</span>
                </div>
              </div>

              <Button
                onClick={generateStaticRecipe}
                disabled={loading}
                variant="outline"
                className="w-full border-dashed"
              >
                <Beaker className="w-4 h-4 mr-2" />
              G√©n√©rer une recette de test
              </Button>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}